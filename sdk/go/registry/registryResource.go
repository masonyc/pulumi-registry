// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package registry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RegistryResource struct {
	pulumi.CustomResourceState

	Name pulumi.StringOutput `pulumi:"name"`
}

// NewRegistryResource registers a new resource with the given unique name, arguments, and options.
func NewRegistryResource(ctx *pulumi.Context,
	name string, args *RegistryResourceArgs, opts ...pulumi.ResourceOption) (*RegistryResource, error) {
	if args == nil {
		args = &RegistryResourceArgs{}
	}

	var resource RegistryResource
	err := ctx.RegisterResource("registry:index/registryResource:RegistryResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistryResource gets an existing RegistryResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistryResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryResourceState, opts ...pulumi.ResourceOption) (*RegistryResource, error) {
	var resource RegistryResource
	err := ctx.ReadResource("registry:index/registryResource:RegistryResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistryResource resources.
type registryResourceState struct {
	Name *string `pulumi:"name"`
}

type RegistryResourceState struct {
	Name pulumi.StringPtrInput
}

func (RegistryResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryResourceState)(nil)).Elem()
}

type registryResourceArgs struct {
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a RegistryResource resource.
type RegistryResourceArgs struct {
	Name pulumi.StringPtrInput
}

func (RegistryResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryResourceArgs)(nil)).Elem()
}

type RegistryResourceInput interface {
	pulumi.Input

	ToRegistryResourceOutput() RegistryResourceOutput
	ToRegistryResourceOutputWithContext(ctx context.Context) RegistryResourceOutput
}

func (*RegistryResource) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryResource)(nil)).Elem()
}

func (i *RegistryResource) ToRegistryResourceOutput() RegistryResourceOutput {
	return i.ToRegistryResourceOutputWithContext(context.Background())
}

func (i *RegistryResource) ToRegistryResourceOutputWithContext(ctx context.Context) RegistryResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryResourceOutput)
}

// RegistryResourceArrayInput is an input type that accepts RegistryResourceArray and RegistryResourceArrayOutput values.
// You can construct a concrete instance of `RegistryResourceArrayInput` via:
//
//	RegistryResourceArray{ RegistryResourceArgs{...} }
type RegistryResourceArrayInput interface {
	pulumi.Input

	ToRegistryResourceArrayOutput() RegistryResourceArrayOutput
	ToRegistryResourceArrayOutputWithContext(context.Context) RegistryResourceArrayOutput
}

type RegistryResourceArray []RegistryResourceInput

func (RegistryResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryResource)(nil)).Elem()
}

func (i RegistryResourceArray) ToRegistryResourceArrayOutput() RegistryResourceArrayOutput {
	return i.ToRegistryResourceArrayOutputWithContext(context.Background())
}

func (i RegistryResourceArray) ToRegistryResourceArrayOutputWithContext(ctx context.Context) RegistryResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryResourceArrayOutput)
}

// RegistryResourceMapInput is an input type that accepts RegistryResourceMap and RegistryResourceMapOutput values.
// You can construct a concrete instance of `RegistryResourceMapInput` via:
//
//	RegistryResourceMap{ "key": RegistryResourceArgs{...} }
type RegistryResourceMapInput interface {
	pulumi.Input

	ToRegistryResourceMapOutput() RegistryResourceMapOutput
	ToRegistryResourceMapOutputWithContext(context.Context) RegistryResourceMapOutput
}

type RegistryResourceMap map[string]RegistryResourceInput

func (RegistryResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryResource)(nil)).Elem()
}

func (i RegistryResourceMap) ToRegistryResourceMapOutput() RegistryResourceMapOutput {
	return i.ToRegistryResourceMapOutputWithContext(context.Background())
}

func (i RegistryResourceMap) ToRegistryResourceMapOutputWithContext(ctx context.Context) RegistryResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryResourceMapOutput)
}

type RegistryResourceOutput struct{ *pulumi.OutputState }

func (RegistryResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryResource)(nil)).Elem()
}

func (o RegistryResourceOutput) ToRegistryResourceOutput() RegistryResourceOutput {
	return o
}

func (o RegistryResourceOutput) ToRegistryResourceOutputWithContext(ctx context.Context) RegistryResourceOutput {
	return o
}

func (o RegistryResourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryResource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type RegistryResourceArrayOutput struct{ *pulumi.OutputState }

func (RegistryResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryResource)(nil)).Elem()
}

func (o RegistryResourceArrayOutput) ToRegistryResourceArrayOutput() RegistryResourceArrayOutput {
	return o
}

func (o RegistryResourceArrayOutput) ToRegistryResourceArrayOutputWithContext(ctx context.Context) RegistryResourceArrayOutput {
	return o
}

func (o RegistryResourceArrayOutput) Index(i pulumi.IntInput) RegistryResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegistryResource {
		return vs[0].([]*RegistryResource)[vs[1].(int)]
	}).(RegistryResourceOutput)
}

type RegistryResourceMapOutput struct{ *pulumi.OutputState }

func (RegistryResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryResource)(nil)).Elem()
}

func (o RegistryResourceMapOutput) ToRegistryResourceMapOutput() RegistryResourceMapOutput {
	return o
}

func (o RegistryResourceMapOutput) ToRegistryResourceMapOutputWithContext(ctx context.Context) RegistryResourceMapOutput {
	return o
}

func (o RegistryResourceMapOutput) MapIndex(k pulumi.StringInput) RegistryResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegistryResource {
		return vs[0].(map[string]*RegistryResource)[vs[1].(string)]
	}).(RegistryResourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryResourceInput)(nil)).Elem(), &RegistryResource{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryResourceArrayInput)(nil)).Elem(), RegistryResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryResourceMapInput)(nil)).Elem(), RegistryResourceMap{})
	pulumi.RegisterOutputType(RegistryResourceOutput{})
	pulumi.RegisterOutputType(RegistryResourceArrayOutput{})
	pulumi.RegisterOutputType(RegistryResourceMapOutput{})
}
