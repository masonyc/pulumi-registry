"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
exports.__esModule = true;
exports.config = void 0;
var pulumi = require("@pulumi/pulumi");
var utilities = require("./utilities");
// Export members:
__exportStar(require("./getRegistryResource"), exports);
__exportStar(require("./provider"), exports);
__exportStar(require("./registryResource"), exports);
// Export sub-modules:
var config = require("./config");
exports.config = config;
// Import resources to register:
var registryResource_1 = require("./registryResource");
var _module = {
    version: utilities.getVersion(),
    construct: function (name, type, urn) {
        switch (type) {
            case "registry:index/registryResource:RegistryResource":
                return new registryResource_1.RegistryResource(name, undefined, { urn: urn });
            default:
                throw new Error("unknown resource type ".concat(type));
        }
    }
};
pulumi.runtime.registerResourceModule("registry", "index/registryResource", _module);
var provider_1 = require("./provider");
pulumi.runtime.registerResourcePackage("registry", {
    version: utilities.getVersion(),
    constructProvider: function (name, type, urn) {
        if (type !== "pulumi:providers:registry") {
            throw new Error("unknown provider type ".concat(type));
        }
        return new provider_1.Provider(name, undefined, { urn: urn });
    }
});
