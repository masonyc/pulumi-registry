"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.RegistryResource = void 0;
var pulumi = require("@pulumi/pulumi");
var utilities = require("./utilities");
var RegistryResource = /** @class */ (function (_super) {
    __extends(RegistryResource, _super);
    function RegistryResource(name, argsOrState, opts) {
        var resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            var state = argsOrState;
            resourceInputs["name"] = state ? state.name : undefined;
        }
        else {
            var args = argsOrState;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        return _super.call(this, RegistryResource.__pulumiType, name, resourceInputs, opts) || this;
    }
    /**
     * Get an existing RegistryResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    RegistryResource.get = function (name, id, state, opts) {
        return new RegistryResource(name, state, __assign(__assign({}, opts), { id: id }));
    };
    /**
     * Returns true if the given object is an instance of RegistryResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    RegistryResource.isInstance = function (obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistryResource.__pulumiType;
    };
    /** @internal */
    RegistryResource.__pulumiType = 'registry:index/registryResource:RegistryResource';
    return RegistryResource;
}(pulumi.CustomResource));
exports.RegistryResource = RegistryResource;
