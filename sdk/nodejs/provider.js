"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.Provider = void 0;
var pulumi = require("@pulumi/pulumi");
var utilities = require("./utilities");
/**
 * The provider type for the registry package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
var Provider = /** @class */ (function (_super) {
    __extends(Provider, _super);
    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    function Provider(name, args, opts) {
        var resourceInputs = {};
        opts = opts || {};
        {
            if ((!args || args.azureClientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'azureClientId'");
            }
            if ((!args || args.azureClientSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'azureClientSecret'");
            }
            if ((!args || args.azureTenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'azureTenantId'");
            }
            if ((!args || args.registryBaseUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryBaseUrl'");
            }
            resourceInputs["azureClientId"] = args ? args.azureClientId : undefined;
            resourceInputs["azureClientSecret"] = args ? args.azureClientSecret : undefined;
            resourceInputs["azureTenantId"] = args ? args.azureTenantId : undefined;
            resourceInputs["registryBaseUrl"] = args ? args.registryBaseUrl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        return _super.call(this, Provider.__pulumiType, name, resourceInputs, opts) || this;
    }
    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    Provider.isInstance = function (obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Provider.__pulumiType;
    };
    /** @internal */
    Provider.__pulumiType = 'registry';
    return Provider;
}(pulumi.ProviderResource));
exports.Provider = Provider;
